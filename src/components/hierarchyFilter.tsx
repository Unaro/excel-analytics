'use client';

import { useState, useEffect } from 'react';
import { ExcelRow } from '@/types';

interface HierarchyFilterProps {
  data: ExcelRow[];
  config: string[]; // ['–û–±–ª–∞—Å—Ç—å','–ì–æ—Ä–æ–¥','–†–∞–π–æ–Ω','–£–ª–∏—Ü–∞']
  onFilterChange: (filters: Record<string, string>) => void;
}

export function HierarchyFilter({ data, config, onFilterChange }: HierarchyFilterProps) {
  const [selections, setSelections] = useState<Record<string, string>>({});
  const [options, setOptions] = useState<Record<string, string[]>>({});

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ü–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
  useEffect(() => {
    if (config.length > 0) {
      const col = config[0];
      const uniq = Array.from(new Set(data.map(r => String(r[col] || ''))))
        .filter(v => v && v !== 'null' && v !== 'undefined');
      setOptions({ [col]: uniq.sort() });
    }
  }, [data, config]);

  // –ü–µ—Ä–µ—Å—á–µ—Ç –æ–ø—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selections
  useEffect(() => {
    if (config.length === 0) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    const selectedLevels = Object.keys(selections).filter(k => selections[k]);
    
    if (selectedLevels.length === 0) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
      return;
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    const newOptions: Record<string, string[]> = { ...options };
    
    for (let i = 0; i < config.length; i++) {
      const currentCol = config[i];
      
      if (i === 0) {
        // –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –≤—Å–µ –æ–ø—Ü–∏–∏
        continue;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–æ–ª–æ–Ω–∫—É
      const parentCol = config[i - 1];
      const parentValue = selections[parentCol];

      if (!parentValue) {
        // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –≤—Å–µ—Ö —Å–ª–µ–¥—É—é—â–∏—Ö
        for (let j = i; j < config.length; j++) {
          delete newOptions[config[j]];
        }
        break;
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—ã–±–æ—Ä–∞–º
      let filteredData = data;
      for (let j = 0; j < i; j++) {
        const col = config[j];
        const val = selections[col];
        if (val) {
          filteredData = filteredData.filter(r => String(r[col] || '') === val);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
      const uniq = Array.from(new Set(filteredData.map(r => String(r[currentCol] || ''))))
        .filter(v => v && v !== 'null' && v !== 'undefined');
      
      newOptions[currentCol] = uniq.sort();
    }

    setOptions(newOptions);
  }, [selections, data, config]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ä—É–∂—É
  useEffect(() => {
    onFilterChange(selections);
  }, [selections, onFilterChange]);

  const handleChange = (col: string, value: string, index: number) => {
    const newSelections = { ...selections };
    
    if (value) {
      newSelections[col] = value;
    } else {
      delete newSelections[col];
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —É—Ä–æ–≤–Ω–∏
    for (let i = index + 1; i < config.length; i++) {
      delete newSelections[config[i]];
    }

    setSelections(newSelections);
  };

  if (config.length === 0) {
    return null;
  }

  return (
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-6 mb-6 border-2 border-purple-200">
      <h3 className="text-lg font-semibold text-purple-900 mb-4 flex items-center gap-2">
        üîç –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {config.map((col, idx) => {
          const isDisabled = idx > 0 && !selections[config[idx - 1]];
          const availableOptions = options[col] || [];
          const currentValue = selections[col] || '';

          return (
            <div key={col} className="flex flex-col">
              <label className="text-sm font-medium mb-2 text-gray-700 flex items-center gap-1">
                <span className="bg-purple-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
                  {idx + 1}
                </span>
                {col}
              </label>
              <select
                disabled={isDisabled || availableOptions.length === 0}
                value={currentValue}
                onChange={(e) => handleChange(col, e.target.value, idx)}
                className={`
                  w-full px-3 py-2 border rounded-lg transition-all
                  ${isDisabled 
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed border-gray-200' 
                    : 'bg-white border-purple-300 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 hover:border-purple-400'
                  }
                  ${currentValue ? 'font-semibold text-purple-900' : 'text-gray-600'}
                `}
              >
                <option value="">
                  {isDisabled 
                    ? `–í—ã–±–µ—Ä–∏—Ç–µ ${config[idx - 1]}...` 
                    : availableOptions.length === 0 
                      ? '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π'
                      : '–í—Å–µ'
                  }
                </option>
                {availableOptions.map((opt) => (
                  <option key={opt} value={opt}>
                    {opt}
                  </option>
                ))}
              </select>
              
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π */}
              {!isDisabled && availableOptions.length > 0 && (
                <span className="text-xs text-gray-500 mt-1">
                  {availableOptions.length} {availableOptions.length === 1 ? '–≤–∞—Ä–∏–∞–Ω—Ç' : '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'}
                </span>
              )}
            </div>
          );
        })}
      </div>

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –≤—ã–±–æ—Ä–∞ */}
      {Object.keys(selections).filter(k => selections[k]).length > 0 && (
        <div className="mt-4 pt-4 border-t border-purple-200">
          <p className="text-sm text-gray-600 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å:</p>
          <div className="flex items-center gap-2 flex-wrap">
            {config.map((col, idx) => {
              const value = selections[col];
              if (!value) return null;
              
              return (
                <div key={col} className="flex items-center gap-2">
                  <div className="bg-purple-100 text-purple-900 px-3 py-1 rounded-full text-sm font-medium">
                    {col}: <strong>{value}</strong>
                  </div>
                  {idx < config.length - 1 && selections[config[idx + 1]] && (
                    <span className="text-purple-400">‚Üí</span>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
}
