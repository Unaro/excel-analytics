'use client';

import { useState, useEffect, DragEvent } from 'react';
import { getExcelData } from '@/lib/storage';
import { getMetadataForSheet } from '@/lib/metadata-manager';
import { SheetData } from '@/types';
import { GripVertical, Trash2, Plus, Save, AlertCircle, ArrowRight } from 'lucide-react';

export default function HierarchySettingsPage() {
  const [sheets, setSheets] = useState<SheetData[]>([]);
  const [hierarchyLevels, setHierarchyLevels] = useState<string[]>([]);
  const [availableFields, setAvailableFields] = useState<string[]>([]);
  const [draggedItem, setDraggedItem] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const data = getExcelData();
    if (data && data.length) {
      setSheets(data);
      
      // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      const md = getMetadataForSheet(data[0].sheetName);
      if (md) {
        const categorical = md.columns
          .filter(col => col.dataType === 'categorical')
          .map(col => col.name);
        setAvailableFields(categorical);
      } else {
        setAvailableFields(data[0].headers);
      }
      
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const savedConfig = localStorage.getItem('hierarchyConfig');
      if (savedConfig) {
        setHierarchyLevels(JSON.parse(savedConfig));
      }
    }
    setLoading(false);
  }, []);

  // Drag handlers –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
  const handleDragStart = (e: DragEvent<HTMLDivElement>, item: string) => {
    setDraggedItem(item);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDropInHierarchy = (e: DragEvent<HTMLDivElement>, targetIndex: number) => {
    e.preventDefault();
    if (!draggedItem) return;

    const newLevels = [...hierarchyLevels];
    const draggedIndex = newLevels.indexOf(draggedItem);

    if (draggedIndex !== -1) {
      // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏
      newLevels.splice(draggedIndex, 1);
      newLevels.splice(targetIndex, 0, draggedItem);
    } else {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
      newLevels.splice(targetIndex, 0, draggedItem);
    }

    setHierarchyLevels(newLevels);
    setDraggedItem(null);
  };

  const handleDropInAvailable = (e: DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (!draggedItem) return;

    // –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    setHierarchyLevels(prev => prev.filter(item => item !== draggedItem));
    setDraggedItem(null);
  };

  const addToHierarchy = (field: string) => {
    if (!hierarchyLevels.includes(field)) {
      setHierarchyLevels([...hierarchyLevels, field]);
    }
  };

  const removeFromHierarchy = (field: string) => {
    setHierarchyLevels(prev => prev.filter(item => item !== field));
  };

  const saveHierarchy = () => {
    localStorage.setItem('hierarchyConfig', JSON.stringify(hierarchyLevels));
    alert('‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
  };

  const resetHierarchy = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —É–¥–∞–ª–∏—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–µ—Ä–∞—Ä—Ö–∏–∏.')) {
      setHierarchyLevels([]);
      localStorage.removeItem('hierarchyConfig');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...</p>
        </div>
      </div>
    );
  }

  if (!sheets || sheets.length === 0) {
    return (
      <div className="text-center py-12">
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-8 max-w-md mx-auto">
          <AlertCircle className="w-12 h-12 text-yellow-600 mx-auto mb-4" />
          <p className="text-xl text-gray-800 mb-2">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>
          <p className="text-gray-600">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
          </p>
        </div>
      </div>
    );
  }

  const fieldsNotInHierarchy = availableFields.filter(
    field => !hierarchyLevels.includes(field)
  );

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–∞–Ω–Ω—ã—Ö</h1>
        <p className="text-gray-600">
          –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: –æ—Ç –±–æ–ª—å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∫ –º–µ–Ω—å—à–µ–º—É
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <Plus className="text-blue-600" size={24} />
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
          </h2>
          
          <div
            onDrop={handleDropInAvailable}
            onDragOver={handleDragOver}
            className="space-y-2 min-h-[300px] border-2 border-dashed border-gray-300 rounded-lg p-4"
          >
            {fieldsNotInHierarchy.length > 0 ? (
              fieldsNotInHierarchy.map((field) => (
                <div
                  key={field}
                  draggable
                  onDragStart={(e) => handleDragStart(e, field)}
                  className="bg-gray-50 border border-gray-200 rounded-lg p-3 cursor-move hover:bg-gray-100 hover:border-gray-300 transition-colors flex items-center justify-between group"
                >
                  <div className="flex items-center gap-2">
                    <GripVertical size={18} className="text-gray-400 group-hover:text-gray-600" />
                    <span className="font-medium text-gray-800">{field}</span>
                  </div>
                  <button
                    onClick={() => addToHierarchy(field)}
                    className="p-1 hover:bg-blue-100 rounded transition-colors"
                    title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é"
                  >
                    <Plus size={18} className="text-blue-600" />
                  </button>
                </div>
              ))
            ) : (
              <div className="text-center py-12 text-gray-400">
                <p>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è —É–∂–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏</p>
                <p className="text-sm mt-2">–∏–ª–∏</p>
                <p className="text-sm">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—é–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</p>
              </div>
            )}
          </div>

          <div className="mt-4 p-3 bg-blue-50 rounded-lg text-sm text-blue-800">
            <p className="font-semibold mb-1">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</p>
            <p>–¢–æ–ª—å–∫–æ –ø–æ–ª—è —Å —Ç–∏–ø–æ–º &quot;–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π&quot; –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏. –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö.</p>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ò–µ—Ä–∞—Ä—Ö–∏—è */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <ArrowRight className="text-green-600" size={24} />
            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
          </h2>

          <div className="space-y-3 min-h-[300px] border-2 border-dashed border-green-300 rounded-lg p-4 bg-green-50/30">
            {hierarchyLevels.length > 0 ? (
              hierarchyLevels.map((field, index) => (
                <div key={field}>
                  <div
                    draggable
                    onDragStart={(e) => handleDragStart(e, field)}
                    onDragOver={handleDragOver}
                    onDrop={(e) => handleDropInHierarchy(e, index)}
                    className="bg-white border-2 border-green-200 rounded-lg p-4 cursor-move hover:border-green-400 hover:shadow-md transition-all group"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <GripVertical size={18} className="text-gray-400 group-hover:text-gray-600" />
                        <div className="flex items-center gap-2">
                          <div className="bg-green-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold">
                            {index + 1}
                          </div>
                          <span className="font-semibold text-gray-800">{field}</span>
                        </div>
                      </div>
                      <button
                        onClick={() => removeFromHierarchy(field)}
                        className="p-1 hover:bg-red-100 rounded transition-colors"
                        title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–µ—Ä–∞—Ä—Ö–∏–∏"
                      >
                        <Trash2 size={18} className="text-red-600" />
                      </button>
                    </div>
                    <div className="ml-9 mt-2 text-xs text-gray-500">
                      {index === 0 && '–í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (—Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π)'}
                      {index === hierarchyLevels.length - 1 && index > 0 && '–ù–∏–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (—Å–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π)'}
                      {index > 0 && index < hierarchyLevels.length - 1 && `–£—Ä–æ–≤–µ–Ω—å ${index + 1}`}
                    </div>
                  </div>
                  
                  {index < hierarchyLevels.length - 1 && (
                    <div className="flex justify-center py-1">
                      <ArrowRight size={20} className="text-green-600" />
                    </div>
                  )}
                </div>
              ))
            ) : (
              <div className="text-center py-12 text-gray-400">
                <p className="text-lg mb-2">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–æ–ª—è —Å—é–¥–∞</p>
                <p className="text-sm">–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</p>
              </div>
            )}
          </div>

          {/* –ü—Ä–µ–≤—å—é –∏–µ—Ä–∞—Ä—Ö–∏–∏ */}
          {hierarchyLevels.length > 0 && (
            <div className="mt-4 p-4 bg-gray-50 rounded-lg">
              <p className="text-sm font-semibold text-gray-700 mb-2">üìä –ü—Ä–µ–≤—å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:</p>
              <div className="flex items-center gap-2 text-sm text-gray-600 flex-wrap">
                {hierarchyLevels.map((field, index) => (
                  <div key={field} className="flex items-center gap-2">
                    <span className="bg-green-100 text-green-800 px-2 py-1 rounded font-medium">
                      {field}
                    </span>
                    {index < hierarchyLevels.length - 1 && (
                      <span className="text-gray-400">‚Üí</span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex flex-col sm:flex-row gap-4 justify-between items-center">
          <div className="text-sm text-gray-600">
            {hierarchyLevels.length > 0 ? (
              <span>‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ <strong>{hierarchyLevels.length}</strong> —É—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏</span>
            ) : (
              <span>‚ùå –ò–µ—Ä–∞—Ä—Ö–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</span>
            )}
          </div>

          <div className="flex gap-3">
            <button
              onClick={resetHierarchy}
              disabled={hierarchyLevels.length === 0}
              className="px-6 py-2 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –û—á–∏—Å—Ç–∏—Ç—å
            </button>
            <button
              onClick={saveHierarchy}
              disabled={hierarchyLevels.length === 0}
              className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Save size={20} />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é
            </button>
          </div>
        </div>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h3 className="font-semibold text-blue-900 mb-3">üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h3>
        <ol className="list-decimal list-inside space-y-2 text-blue-800 text-sm">
          <li>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –≤ –ø—Ä–∞–≤—É—é –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ</li>
          <li>–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Å–∞–º—ã–π —à–∏—Ä–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–±–ª–∞—Å—Ç—å)</li>
          <li>–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Å–∞–º—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –£–ª–∏—Ü–∞)</li>
          <li>–ò–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏</li>
          <li>–£–¥–∞–ª–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –ø–µ—Ä–µ—Ç–∞—â–∏–≤ –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤–ª–µ–≤–æ –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É</li>
          <li>–ù–∞–∂–º–∏—Ç–µ &quot;–°–æ—Ö—Ä–∞–Ω–∏—Ç—å&quot; –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
        </ol>
      </div>
    </div>
  );
}
