'use client';

import { useState, useEffect } from 'react';
import { Save, Trash2, Plus, GripVertical, AlertCircle, CheckCircle } from 'lucide-react';
import { getFieldTypes, saveFieldTypes } from '@/lib/field-type-store';
import { dataStore } from '@/lib/data-store';
import type { FieldInfo } from '@/lib/field-type-store';

export default function SettingsHierarchyPage() {
  const [hierarchyConfig, setHierarchyConfig] = useState<string[]>([]);
  const [availableFields, setAvailableFields] = useState<string[]>([]);
  const [fieldTypes, setFieldTypes] = useState<Record<string, FieldInfo>>({});
  const [loading, setLoading] = useState(true);
  const [saved, setSaved] = useState(false);
  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);

  useEffect(() => {
    if (typeof window === 'undefined') return;

    const config = JSON.parse(localStorage.getItem('hierarchyConfig') || '[]') as string[];
    const headers = dataStore.getHeaders();
    const types = getFieldTypes();

    setHierarchyConfig(config);
    setAvailableFields(headers);
    setFieldTypes(types);
    setLoading(false);
  }, []);

  const handleSaveConfig = (): void => {
    localStorage.setItem('hierarchyConfig', JSON.stringify(hierarchyConfig));
    setSaved(true);
    setTimeout(() => setSaved(false), 3000);
  };

  const handleAddField = (field: string): void => {
    if (!hierarchyConfig.includes(field)) {
      const newConfig = [...hierarchyConfig, field];
      setHierarchyConfig(newConfig);

      // –û–±–Ω–æ–≤–ª—è–µ–º fieldTypes —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
      const updated = {
        ...fieldTypes,
        [field]: {
          ...fieldTypes[field],
          isInHierarchy: true,
        },
      };
      setFieldTypes(updated);
      saveFieldTypes(updated);
    }
  };

  const handleRemoveField = (index: number): void => {
    const field = hierarchyConfig[index];
    const newConfig = hierarchyConfig.filter((_, i) => i !== index);
    setHierarchyConfig(newConfig);

    // –û–±–Ω–æ–≤–ª—è–µ–º fieldTypes —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–µ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    const updated = {
      ...fieldTypes,
      [field]: {
        ...fieldTypes[field],
        isInHierarchy: false,
      },
    };
    setFieldTypes(updated);
    saveFieldTypes(updated);
  };

  const handleDragStart = (index: number): void => {
    setDraggedIndex(index);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>): void => {
    e.preventDefault();
  };

  const handleDrop = (targetIndex: number): void => {
    if (draggedIndex === null || draggedIndex === targetIndex) {
      setDraggedIndex(null);
      return;
    }

    const newConfig = [...hierarchyConfig];
    const [draggedItem] = newConfig.splice(draggedIndex, 1);
    newConfig.splice(targetIndex, 0, draggedItem);
    setHierarchyConfig(newConfig);
    setDraggedIndex(null);
  };

  const categoricalFields = availableFields.filter(
    (field) => fieldTypes[field]?.type === 'categorical' && fieldTypes[field]?.isVisible
  );

  const unselectedFields = categoricalFields.filter((field) => !hierarchyConfig.includes(field));

  const hierarchyLevelLabels: Record<number, string> = {
    0: '–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å',
    1: '–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å',
    2: '–¢—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å',
    3: '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å',
    4: '–ü—è—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å',
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="rounded-lg border border-blue-200 bg-blue-50 p-6">
        <h2 className="text-lg font-semibold text-blue-900 mb-3">üèóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏</h2>
        <p className="text-sm text-blue-800 mb-3">
          –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: –æ—Ç –æ–±—â–µ–≥–æ
          (–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è) –∫ —á–∞—Å—Ç–Ω–æ–º—É (–±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–º—É).
        </p>
        <div className="text-xs text-blue-700 bg-white p-2 rounded border border-blue-200">
          üí° <strong>–ü—Ä–∏–º–µ—Ä:</strong> –†–µ–≥–∏–æ–Ω ‚Üí –ì–æ—Ä–æ–¥ ‚Üí –†–∞–π–æ–Ω
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è */}
        <div className="lg:col-span-2">
          <div className="rounded-lg border border-gray-200 bg-white overflow-hidden">
            <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
              <h3 className="font-semibold text-gray-900 flex items-center">
                <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                –í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ ({hierarchyConfig.length})
              </h3>
            </div>

            {hierarchyConfig.length === 0 ? (
              <div className="p-6 text-center">
                <p className="text-gray-500 text-sm mb-4">–ò–µ—Ä–∞—Ä—Ö–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞</p>
                <p className="text-xs text-gray-400">–î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–ø—Ä–∞–≤–∞</p>
              </div>
            ) : (
              <div className="divide-y divide-gray-200">
                {hierarchyConfig.map((field, index) => (
                  <div
                    key={index}
                    draggable
                    onDragStart={() => handleDragStart(index)}
                    onDragOver={handleDragOver}
                    onDrop={() => handleDrop(index)}
                    className={`
                      flex items-center gap-3 px-6 py-4 cursor-move transition-colors
                      ${draggedIndex === index ? 'bg-blue-100 opacity-50' : 'hover:bg-gray-50'}
                    `}
                  >
                    <GripVertical className="w-5 h-5 text-gray-400 flex-shrink-0" />

                    <div className="flex-1 min-w-0">
                      <div className="text-sm font-medium text-gray-900">{field}</div>
                      <div className="text-xs text-gray-500">
                        {hierarchyLevelLabels[index] || `–£—Ä–æ–≤–µ–Ω—å ${index + 1}`}
                      </div>
                    </div>

                    <button
                      onClick={() => handleRemoveField(index)}
                      className="p-2 text-red-600 hover:bg-red-50 rounded transition-colors flex-shrink-0"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                ))}
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex gap-2">
              <button
                onClick={handleSaveConfig}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center font-medium"
              >
                <Save className="w-4 h-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
              </button>

              {saved && (
                <div className="px-4 py-2 bg-green-100 text-green-700 rounded-lg text-sm font-medium flex items-center">
                  ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è */}
        <div className="rounded-lg border border-gray-200 bg-white overflow-hidden">
          <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
            <h3 className="font-semibold text-gray-900 flex items-center">
              <Plus className="w-5 h-5 text-orange-600 mr-2" />
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è ({unselectedFields.length})
            </h3>
          </div>

          {unselectedFields.length === 0 ? (
            <div className="p-6 text-center">
              <p className="text-gray-500 text-sm">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π</p>
              <p className="text-xs text-gray-400 mt-2">
                –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è
              </p>
            </div>
          ) : (
            <div className="divide-y divide-gray-200 max-h-96 overflow-y-auto">
              {unselectedFields.map((field) => (
                <button
                  key={field}
                  onClick={() => handleAddField(field)}
                  className="w-full text-left px-6 py-3 hover:bg-blue-50 transition-colors flex items-center justify-between group"
                >
                  <span className="text-sm font-medium text-gray-900 truncate">{field}</span>
                  <Plus className="w-4 h-4 text-gray-400 group-hover:text-blue-600 flex-shrink-0" />
                </button>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è */}
      <div className="rounded-lg border border-amber-200 bg-amber-50 p-6">
        <h3 className="font-semibold text-amber-900 mb-3">‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–ª—è–º</h3>
        <ul className="text-sm text-amber-800 space-y-2">
          <li className="flex items-start gap-2">
            <span className="text-amber-600 flex-shrink-0">‚Ä¢</span>
            <span>–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∏–ø–∞ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–µ"</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-amber-600 flex-shrink-0">‚Ä¢</span>
            <span>–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–í–∏–¥–∏–º–æ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö –∏ —Ñ–æ—Ä–º—É–ª–∞—Ö"</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-amber-600 flex-shrink-0">‚Ä¢</span>
            <span>–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏" –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-amber-600 flex-shrink-0">‚Ä¢</span>
            <span>–ü–æ—Ä—è–¥–æ–∫ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç –æ–±—â–µ–≥–æ –∫ —á–∞—Å—Ç–Ω–æ–º—É</span>
          </li>
          <li className="flex items-start gap-2">
            <span className="text-amber-600 flex-shrink-0">‚Ä¢</span>
            <span>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞</span>
          </li>
        </ul>
      </div>

      {/* –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è */}
      {hierarchyConfig.length > 0 && (
        <div className="rounded-lg border border-green-200 bg-green-50 p-6">
          <h3 className="font-semibold text-green-900 mb-3">‚úì –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</h3>
          <div className="text-sm text-green-800 space-y-1">
            {hierarchyConfig.map((field, idx) => (
              <div key={idx} className="flex items-center gap-2">
                <span className="w-6 h-6 rounded-full bg-green-200 text-green-700 flex items-center justify-center text-xs font-bold">
                  {idx + 1}
                </span>
                <span>{field}</span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
